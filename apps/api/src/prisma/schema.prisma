// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String    @id @default(uuid())
  name        String
  subdomain   String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]
  teams       Team[]
  tasks       Task[]
  epics       Epic[]
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  company       Company   @relation(fields: [companyId], references: [id])
  companyId     String
  teams         TeamMember[]
  assignedTasks Task[]    @relation("AssignedTo")
  createdTasks  Task[]    @relation("CreatedBy")

  @@unique([email, companyId])
}

model Team {
  id          String      @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  company     Company     @relation(fields: [companyId], references: [id])
  companyId   String
  members     TeamMember[]
  tasks       Task[]
  epics       Epic[]
}

model TeamMember {
  id        String   @id @default(uuid())
  role      Role     @default(MEMBER)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, teamId])
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String
  epic        Epic?     @relation(fields: [epicId], references: [id])
  epicId      String?
  assignedTo  User?     @relation("AssignedTo", fields: [assignedToId], references: [id])
  assignedToId String?
  createdBy   User      @relation("CreatedBy", fields: [createdById], references: [id])
  createdById String
}

model Epic {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      EpicStatus @default(IN_PROGRESS)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String
  tasks       Task[]
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum EpicStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}