// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  clerkId     String    @unique @default("") // ID de Clerk
  email       String    @unique
  name        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  company     Company?  @relation(fields: [companyId], references: [id])
  companyId   String?
  skills      UserSkill[]
  tasks       Task[]    @relation("AssignedTasks")
  comments    TaskComment[]
  teams       TeamMember[]
}

model Company {
  id          String    @id @default(uuid())
  clerkId     String    @unique @default("") @map("idx_clerkId") // ID de Clerk
  name        String
  subdomain   String    @unique @default("") @map("idx_subdomain")
  businessRules String?  @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  members     User[]
  epics       Epic[]
  teams       Team[]
}

model Team {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String
  members     TeamMember[]
  epics       Epic[]
  tasks       Task[]

  @@unique([name, companyId])
}

model TeamMember {
  id          String    @id @default(uuid())
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  role        TeamRole  @default(MEMBER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@unique([teamId, userId])
}

enum TeamRole {
  ADMIN
  MEMBER
}

model Epic {
  id          String    @id @default(uuid())
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String
  team        Team?     @relation(fields: [teamId], references: [id])
  teamId      String?
  tasks       Task[]
  isCompanyWide Boolean @default(false)
}

model Task {
  id              String    @id @default(uuid())
  title           String
  description     String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  epic            Epic      @relation(fields: [epicId], references: [id])
  epicId          String    @default("") @map("idx_epic")
  team            Team      @relation(fields: [teamId], references: [id])
  teamId          String    @default("") @map("idx_team")
  assignedTo      User?     @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId    String?   @default("") @map("idx_assignedTo")
  status          TaskStatus @default(TODO)
  assignmentReason String?  @db.Text
  comments        TaskComment[]
}

model TaskComment {
  id          String    @id @default(uuid())
  task        Task      @relation(fields: [taskId], references: [id])
  taskId      String
  comment     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model UserSkill {
  id          String    @id @default(uuid())
  name        String
  rating      Int       @default(0)
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@unique([userId, name])
}

model Prompt {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}