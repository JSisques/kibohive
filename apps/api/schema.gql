# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Company {
  businessRules: String
  clerkId: String
  createdAt: DateTime
  epics: [Epic!]
  id: String
  members: [User!]
  name: String
  subdomain: String
  updatedAt: DateTime
}

input CreateCompanyInput {
  clerkId: String!
  name: String!
  subdomain: String!
}

input CreateEpicInput {
  clerkCompanyId: String!
  description: String
  teamId: String
  title: String!
}

input CreatePromptInput {
  description: String!
  name: String!
}

input CreateTaskCommentInput {
  comment: String!
  taskId: String!
  userId: String!
}

input CreateTaskInput {
  assignedToId: String
  companyId: String!
  createdById: String
  description: String
  dueDate: String
  epicId: String
  status: TaskStatus
  teamId: String!
  title: String!
}

input CreateTeamInput {
  companyId: String!
  description: String
  name: String!
}

input CreateUserInput {
  clerkId: String!
  companyId: String
  email: String!
  name: String
}

input CreateUserQueryInput {
  clerkCompanyId: String!
  conversationHistory: String
  userQuery: String!
}

input CreateUserSkillInput {
  name: String!
  rating: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Epic {
  company: Company
  companyId: String!
  createdAt: DateTime!
  description: String
  id: String!
  numberOfTaskCompleted: Float!
  numberOfTaskInProgress: Float!
  numberOfTaskPending: Float!
  numberOfTasks: Float!
  tasks: [Task!]
  tasksCompleted: [Task!]
  tasksInProgress: [Task!]
  tasksPending: [Task!]
  title: String!
  updatedAt: DateTime!
}

type Mutation {
  addUserSkill(skill: CreateUserSkillInput!, userId: String!): UserSkill!
  createCompany(input: CreateCompanyInput!): Company!
  createEpic(autoAssign: Boolean!, input: CreateEpicInput!, useAI: Boolean!): Epic!
  createPrompt(input: CreatePromptInput!): Prompt!
  createTask(input: CreateTaskInput!): Task!
  createTaskComment(input: CreateTaskCommentInput!): TaskComment!
  createTeam(createTeamDto: CreateTeamInput!): Team!
  createUser(input: CreateUserInput!): User!
  deleteCompany(id: String!): Company!
  deleteEpic(id: String!): Epic!
  deletePrompt(id: String!): Prompt!
  deleteTask(id: String!): Task!
  deleteTaskComment(id: String!): TaskComment!
  deleteTeam(teamId: String!): Team!
  deleteUser(id: String!): User!
  deleteUserSkill(skillId: String!, userId: String!): UserSkill!
  executeUserQuery(input: CreateUserQueryInput!): UserQuery!
  updateCompany(id: String!, input: UpdateCompanyInput!): Company!
  updateEpic(id: String!, input: UpdateEpicInput!): Epic!
  updatePrompt(id: String!, input: CreatePromptInput!): Prompt!
  updateTask(id: String!, input: UpdateTaskInput!): Task!
  updateTaskComment(id: String!, input: UpdateTaskCommentInput!): TaskComment!
  updateTaskStatus(id: String!, input: UpdateTaskStatusDto!): Task!
  updateTeam(teamId: String!, updateTeamDto: UpdateTeamInput!): Team!
  updateUser(id: String!, input: UpdateUserInput!): User!
  updateUserOrganization(clerkCompanyId: String!, clerkUserId: String!): User!
  updateUserSkill(skill: UpdateUserSkillInput!, skillId: String!, userId: String!): UserSkill!
}

type Prompt {
  createdAt: DateTime!
  description: String!
  id: String!
  name: String!
  updatedAt: DateTime!
}

type Query {
  getCompanies: [Company!]!
  getCompanyByClerkId(clerkId: String!): Company!
  getCompanyById(id: String!): Company!
  getCompanyBySubdomain(subdomain: String!): Company!
  getEpicById(id: String!): Epic!
  getEpics: [Epic!]!
  getPromptById(id: String!): Prompt!
  getPromptByName(name: String!): Prompt!
  getPrompts: [Prompt!]!
  getTaskById(id: String!): Task!
  getTaskComments(taskId: String!): [TaskComment!]!
  getTasks(limit: Int, page: Int): [Task!]!
  getTeamById(teamId: String!): Team!
  getTeams: [Team!]!
  getTeamsByCompanyId(companyId: String!): [Team!]!
  getUserByClerkId(clerkId: String!): User!
  getUserById(id: String!): User!
  getUserSkills(userId: String!): [UserSkill!]!
  getUsers: [User!]!
  tasksCount: Int!
}

type Task {
  assignedTo: User
  assignedToId: String
  assignmentReason: String
  comments: [TaskComment!]
  createdAt: DateTime!
  deletedAt: DateTime
  description: String
  epic: Epic
  epicId: String
  id: String!
  status: TaskStatus!
  title: String!
  updatedAt: DateTime!
}

type TaskComment {
  comment: String!
  createdAt: DateTime!
  id: String!
  taskId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

"""Estado de la tarea"""
enum TaskStatus {
  DONE
  IN_PROGRESS
  TODO
}

type Team {
  companyId: String!
  createdAt: DateTime!
  deletedAt: DateTime
  description: String
  id: String!
  members: [TeamMember!]!
  name: String!
  updatedAt: DateTime!
}

type TeamMember {
  id: String!
  teamId: String!
  user: User!
  userId: String!
}

input UpdateCompanyInput {
  businessRules: String
  name: String
  subdomain: String
}

input UpdateEpicInput {
  description: String
  endDate: String!
  startDate: String!
  title: String!
}

input UpdateTaskCommentInput {
  comment: String!
}

input UpdateTaskInput {
  title: String!
}

input UpdateTaskStatusDto {
  status: String!
}

input UpdateTeamInput {
  description: String
  name: String!
}

input UpdateUserInput {
  email: String
  name: String
  password: String
}

input UpdateUserSkillInput {
  name: String
  rating: Float
}

type User {
  clerkId: String!
  companyId: String!
  createdAt: DateTime!
  email: String!
  id: String!
  name: String
  skills: [UserSkill!]
  tasks: [Task!]
  updatedAt: DateTime!
}

type UserQuery {
  response: String!
}

type UserSkill {
  createdAt: DateTime!
  id: String!
  name: String!
  rating: Float!
  updatedAt: DateTime!
  userId: String!
}